[
	{
		title:'node 服务器端 JavaScript 解释器  <a href="https://nodejs.org/en/">https://nodejs.org/en/</a> ',
		time: "2016.10.8",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2">node包管理和分发工具</td></tr>'
					+'<tr><td class="td1" data-line-number="2"></td><td class="td2 padding_left"> npm install moduleNames：安装Node模块安装完毕后会产生一个node_modules目录，其目录下就是安装的各个node模块。</td></tr>'
					+'<tr><td class="td1" data-line-number="3"></td><td class="td2 padding_left"> npm view moduleNames：查看node模块的package.json文件夹</td></tr>'
					+'<tr><td class="td1" data-line-number="4"></td><td class="td2 padding_left"> npm view moduleNames：查看node模块的package.json文件夹</td></tr>'
					+'<tr><td class="td1" data-line-number="5"></td><td class="td2 padding_left"> npm list：查看当前目录下已安装的node包</td></tr>'
					+'<tr><td class="td1" data-line-number="6"></td><td class="td2 padding_left"> npm help：查看帮助命令</td></tr>'
					+'<tr><td class="td1" data-line-number="7"></td><td class="td2 padding_left"> npm view moudleName dependencies：查看包的依赖关系</td></tr>'
					+'<tr><td class="td1" data-line-number="8"></td><td class="td2 padding_left"> npm view moduleName repository.url：查看包的源文件地址</td></tr>'
					+'<tr><td class="td1" data-line-number="9"></td><td class="td2 padding_left"> npm view moduleName engines：查看包所依赖的Node的版本</td></tr>'
					+'<tr><td class="td1" data-line-number="10"></td><td class="td2 padding_left"> npm help folders：查看npm使用的所有文件夹</td></tr>'
					+'<tr><td class="td1" data-line-number="11"></td><td class="td2 padding_left"> npm rebuild moduleName：用于更改包内容后进行重建</td></tr>'
					+'<tr><td class="td1" data-line-number="12"></td><td class="td2 padding_left"> npm outdated：检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新</td></tr>'
					+'<tr><td class="td1" data-line-number="13"></td><td class="td2 padding_left"> npm update moduleName：更新node模块</td></tr>'
					+'<tr><td class="td1" data-line-number="14"></td><td class="td2 padding_left"> npm uninstall moudleName：卸载node模块</td></tr>'
					+'<tr><td class="td1" data-line-number="15"></td><td class="td2 padding_left"> 发布一个npm包的时候，需要检验某个包名是否已存在$ npm search packageName </td></tr>'
					+'<tr><td class="td1" data-line-number="16"></td><td class="td2 padding_left"> npm init：会引导你创建一个package.json文件，包括名称、版本、作者这些信息等 </td></tr>'
					+'<tr><td class="td1" data-line-number="17"></td><td class="td2 padding_left"> npm root：查看当前包的安装路径 </td></tr>'
					+'<tr><td class="td1" data-line-number="18"></td><td class="td2 padding_left"> npm root -g：查看全局的包的安装路径 </td></tr>'

				+'</table>'	
	},
	{
		title:'fis3  为你定制的前端工程构建工具  <a href="http://fis.baidu.com/">http://fis.baidu.com/</a> ',
		time: "2016.3.17",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2">npm install -g fis3</td></tr>'
					+'<tr><td class="td1" data-line-number="2"></td><td class="td2">$ fis3 -v</td></tr>'
					+'<tr><td class="td1" data-line-number="3"></td><td class="td2">fis3 release -d  (path)  释放输出目  <path> 路径</td></tr>'
					+'<tr><td class="td1" data-line-number="4"></td><td class="td2">fis3 release -h   获取更多的参数设置</td></tr>'
					+'<tr><td class="td1" data-line-number="5"></td><td class="td2">fis3 server start -p 8181   创建一个本地服务器</td></tr>'
					+'<tr><td class="td1" data-line-number="6"></td><td class="td2">fis3 server stop   关闭服务器</td></tr>'
					+'<tr><td class="td1" data-line-number="7"></td><td class="td2">fis3 server open     打开根目录</td></tr>'
					+'<tr><td class="td1" data-line-number="8"></td><td class="td2"> fis3 release development -wL(选择启动的配置项)</td></tr>'
				+'</table>'	
	},		
	{
		title: "webpack 模块加载器兼打包工具",
		time: "2016.10.12",
		inner: '<table>'
				+'<tr><td class="td1" data-line-number="1"></td><td class="td2">npm init 生成package.json 文件  进行webpack初始配置</td></tr>'
				+'<tr><td class="td1" data-line-number="2"></td><td class="td2">npm install  安装 package.json  中所有的依赖</td></tr>'
				+'<tr><td class="td1" data-line-number="3"></td><td class="td2">安装依赖</td></tr>'
				+'<tr><td class="td1" data-line-number="4"></td><td class="td2 padding_left">(1) npm i webpack-dev-server --save  安装webpack-dev-server</td></tr>'
				+'<tr><td class="td1" data-line-number="5"></td><td class="td2 padding_left">(2) npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev	安装es6 的依赖</td></tr>'
				+'<tr><td class="td1" data-line-number="6"></td><td class="td2 padding_left">(3) npm install react react-dom --save	  安装 react</td></tr>'
				+'<tr><td class="td1" data-line-number="7"></td><td class="td2 padding_left">(4) npm install css-loader style-loader --save-dev		安装 css的加载器</td></tr>'
				+'<tr><td class="td1" data-line-number="8"></td><td class="td2 padding_left">(5) npm install less-loader  或者 npm install sass-loader		安装 less和sass</td></tr>'
				+'<tr><td class="td1" data-line-number="9"></td><td class="td2 padding_left">(6) npm install url-loader --save-dev				安装 图片插件</td></tr>'
				+'<tr><td class="td1" data-line-number="10"></td><td class="td2 ">webpack  先编译 npm run dev   后运行 npm run build </td></tr>'
				+'<tr><td class="td1" data-line-number="11"></td><td class="td2 ">webpack.config.js 配置基本 </td></tr>'				
				+'<tr><td class="td1" data-line-number="12"></td><td class="td2 padding_left">var path = require("path"); 使用 require(XXX) 的形式来引入各模块</td></tr>'
				+'<tr><td class="td1" data-line-number="13"></td><td class="td2 padding_left">entry    页面入口文件配置</td></tr>'
				+'<tr><td class="td1" data-line-number="14"></td><td class="td2 padding_left">output 	入口文件输出配置</td></tr>'
				+'<tr><td class="td1" data-line-number="15"></td><td class="td2 padding_left">module    加载插件配置</td></tr>'

				+'</table>'
	},
	{	
		title:"git 免费 开源的分布式版本控制系统",
		time: "2016.10.13",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2">git add .</td></tr>'
					+'<tr><td class="td1" data-line-number="2"></td><td class="td2">git commit -m "注释"</td></tr>'
					+'<tr><td class="td1" data-line-number="3"></td><td class="td2">git pull origin master 拉取仓库代码</td></tr>'
					+'<tr><td class="td1" data-line-number="4"></td><td class="td2">git push origin master 提交代码到仓库</td></tr>'
					+'<tr><td class="td1" data-line-number="5"></td><td class="td2">git log 查看历史版本</td></tr>'
					+'<tr><td class="td1" data-line-number="6"></td><td class="td2">git reset --hard  37d046f4f71e321d288d2301eb0137917739c38e   去撤销这次修改</td></tr>'
					+'<tr><td class="td1" data-line-number="7"></td><td class="td2">git clone https://your_username@bitbucket.org/your_username/name_of_remote_repository.git  拷贝仓库代码</td></tr>'
					+'<tr><td class="td1" data-line-number="8"></td><td class="td2">git init</td></tr>'
					+'<tr><td class="td1" data-line-number="9"></td><td class="td2">git config user.name "someone"</td></tr>'
					+'<tr><td class="td1" data-line-number="10"></td><td class="td2">git config user.email "someone@someplace.com"</td></tr>'
				+'</table>'
	},
	{
		title:'react  现在最热门的前端框架 <a href="http://www.ruanyifeng.com/blog/2015/03/react.html">http://www.ruanyifeng.com/blog/2015/03/react.html</a> ',
		time: "2016.10.14",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2">什么是react？</td></tr>'
					+'<tr><td class="td1" data-line-number="2"></td><td class="td2 padding_left">它是一个用于创建可复用，可聚合 Web组件的js库。只提供了前端MVC框架中的“V”。不是完整的MVC框架。</td></tr>'
					+'<tr><td class="td1" data-line-number="3"></td><td class="td2">为何使用react？</td></tr>'
					+'<tr><td class="td1" data-line-number="4"></td><td class="td2 padding_left">（1）组件化的。   而不是写html模板，js逻辑与HTML标签紧密相连并且容易理解。</td></tr>'
					+'<tr><td class="td1" data-line-number="5"></td><td class="td2 padding_left">（2）单向数据流。  数据一旦更新，就直接重新渲染整个app。</td></tr>'
					+'<tr><td class="td1" data-line-number="6"></td><td class="td2">1、react入门：</td></tr>'
					+'<tr><td class="td1" data-line-number="7"></td><td class="td2 padding_left">react 帮助我们管理视图。</td></tr>'
					+'<tr><td class="td1" data-line-number="8"></td><td class="td2 padding_left">提出虚拟DOM结构的概念，也管理了一套虚拟DOM。 检查和真正浏览器的DOM有什么不同。</td></tr>'
					+'<tr><td class="td1" data-line-number="9"></td><td class="td2 padding_left">React 要求必须要有一个父级元素， 并且是  只可以 有且只有一个父级元素。</td></tr>'
					+'<tr><td class="td1" data-line-number="10"></td><td class="td2 padding_left">react是通过改变它的状态也就是外部改变他 （state）达到重新渲染DOM结构的组件化的效果。</td></tr>'
					+'<tr><td class="td1" data-line-number="11"></td><td class="td2 padding_left">JSX 不是一门新的语言仅仅是个语法糖 允许开发者在javascript中书写HTML语法</td></tr>'
					+'<tr><td class="td1" data-line-number="12"></td><td class="td2 padding_left">JSX 以 data- 开始的自定义属性会被渲染到页面上，其他自定义属性会被忽略掉</td></tr>'
					+'<tr><td class="td1" data-line-number="13"></td><td class="td2 padding_left">JSX 以 {{_html:"会转化为 JSX 字符串"}}</td></tr>'
					+'<tr><td class="td1" data-line-number="14"></td><td class="td2 padding_left">JSX样式 style={} </td></tr>'
					+'<tr><td class="td1" data-line-number="15"></td><td class="td2 padding_left">ReactJS 约定自定义组件首字母必须大写</td></tr>'
					+'<tr><td class="td1" data-line-number="16"></td><td class="td2 padding_left">事件绑定: onClick={clickList.bind(this,"参数")}  首先,事件名称一定要采用驼峰命名法， bind方法 第一个参数为作用域  第二个参数传递参数</td></tr>'
					+'<tr><td class="td1" data-line-number="17"></td><td class="td2 padding_left">ReactJS的生命周期 : 创建阶段 实例化阶段 虚拟DOM 更新阶段 </td></tr>'
					+'<tr><td class="td1" data-line-number="18"></td><td class="td2 padding_left1"><span>创建阶段</span>:该阶段只要发生在创建组件件类的时候 即在调用React.createClass的是时候。这个阶段只会触发一个 getDefaultProps方法，该方法会返回一个对象，并缓存下来。然后与父组件指定的 props 对象合并，最后赋值给this.props作为该组件的默认属性</td></tr>'
					+'<tr><td class="td1" data-line-number="19"></td><td class="td2 padding_left1"><span>实例化阶段</span>:该组件类被调用的时候</td></tr>'
					+'<tr><td class="td1" data-line-number="20"></td><td class="td2 padding_left2">(1) getInitialState 初始化组件的时state的值，返回值会赋值给组件的this.start属性</td></tr>'
					+'<tr><td class="td1" data-line-number="21"></td><td class="td2 padding_left2">(2) componentWillMount 根据业务逻辑来对state进行相应的操作</td></tr>'
					+'<tr><td class="td1" data-line-number="22"></td><td class="td2 padding_left2">(3) render 根据state的值，生成页面需要的虚拟DOM结构，并返回该结构</td></tr>'
					+'<tr><td class="td1" data-line-number="23"></td><td class="td2 padding_left2">(4) componentDidMount 对根据虚拟DOM结构而生成的真实DOM进行相应的处理，组件内部可以通过this.getDOMNode()来获取当前组件的节点。然后就可以像在Web开发总那样操作里面的DOM元素了</td></tr>'
					+'<tr><td class="td1" data-line-number="24"></td><td class="td2 padding_left2"> state ：组件的属性 主要用来存储组件自身需要的数据。它是可以改变的，它的每次改变都会引发组件的更新，这也是ReactJS中的关键点之一。每次书剑的更新都是通过修改state属性的值，然后ReactJS内部会监听state属性的变化，一旦发生变化，就会主动触发组件的render方法更新DOM结构</td></tr>'
					+'<tr><td class="td1" data-line-number="25"></td><td class="td2 padding_left2"> 虚拟DOM ：它是ReactJS 中提出的一个概念，是将真实的DOM结构映射成一个JSON数据结构</td></tr>'
					+'<tr><td class="td1" data-line-number="26"></td><td class="td2 padding_left1"><span>更新阶段</span>:主要发生在用户操作之后或者父组件有更新的时候，此时会根据用户的操作行为进行相应的页面结构的调整。</td></tr>'
					+'<tr><td class="td1" data-line-number="27"></td><td class="td2 padding_left2">(1) componentWillReceiveProps(object,nextProps) 当组件接受到新的props时，会触发该函数。在该函数中，通常可以调用this.setState 方法来完成state的修改</td></tr>'
					+'<tr><td class="td1" data-line-number="28"></td><td class="td2 padding_left2">(2) shouldComponentUpdata(nextProps,nextState) 该方法用来拦截新的 props 或 state ,然后根据事先设定好的判断逻辑，做出最后要不要跟新组件的决定</td></tr>'
					+'<tr><td class="td1" data-line-number="29"></td><td class="td2 padding_left2">(3) componentWillUpdata(object nextProps,object nextState) 当步骤(2)的shouldComponentUpdata方法的拦截返回 true的时候，就可以在该方法中做一些更新之前的操作</td></tr>'
					+'<tr><td class="td1" data-line-number="30"></td><td class="td2 padding_left2">(4) render 根据一系列的diff算法， 生成需要更新的虚拟DOM数据。</td></tr>'
					+'<tr><td class="td1" data-line-number="31"></td><td class="td2 padding_left2">(5) componentDidUpdata 该方法在组件的更新已经同步到DOM中后触发，我们常在该方法总做一些DOM操作</td></tr>'
					+'<tr><td class="td1" data-line-number="32"></td><td class="td2 padding_left1"><span>销毁阶段</span>:目前看来只会触发一个叫 componentWillUnmount的方法 当组件从DOM中移除的时候，取消时间绑定、移除虚拟DOM中对应的组件数据结构、销毁一些无效的定时器等工作</td></tr>'
					+'<tr><td class="td1" data-line-number="33"></td><td class="td2">2、react实践：</td></tr>'
					+'<tr><td class="td1" data-line-number="34"></td><td class="td2 padding_left">实现容器中放入多个react组件</td></tr>'
					+'<tr><td class="td1" data-line-number="35"></td><td class="td2 padding_left1">用div包裹多个react组件名</td></tr>'
					+'<tr><td class="td1" data-line-number="36"></td><td class="td2 padding_left">方法 ： </td></tr>'
					+'<tr><td class="td1" data-line-number="37"></td><td class="td2 padding_left1">getInitialState 初始状态</td></tr>'			
					+'<tr><td class="td1" data-line-number="38"></td><td class="td2 padding_left1">var dome = React.findDOMNode(this.refs.tip) 获取子元素  refs 子元素集 &nbsp;&nbsp;&nbsp;&nbsp; tip子元素的名称 (在子元素 设置属性 ref = tip) </td></tr>'
					+'<tr><td class="td1" data-line-number="39"></td><td class="td2 padding_left1">dome.style.display = "block"  设置属性(源生js)</td></tr>'

				+'</table>'	
	},		
	{
		title:'css 常见样式问题',
		time: "2016.10.20",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2 "><span>超出省略号</span></td></tr>'
					+'<tr><td class="td1" data-line-number="2"></td><td class="td2 padding_left">  white-space: nowrap;</td></tr>'
					+'<tr><td class="td1" data-line-number="3"></td><td class="td2  padding_left">  text-overflow: ellipsis;</td></tr>'			
					+'<tr><td class="td1" data-line-number="4"></td><td class="td2 padding_left">  overflow: hidden;</td></tr>'
					+'<tr><td class="td1" data-line-number="5"></td><td class="td2"><span>长英文自动换行</span></td></tr>'
					+'<tr><td class="td1" data-line-number="6"></td><td class="td2 padding_left">  word-wrap:break-word;</td></tr>'
					+'<tr><td class="td1" data-line-number="7"></td><td class="td2 padding_left">  word-break:break-all;</td></tr>'
					+'<tr><td class="td1" data-line-number="8"></td><td class="td2"><span>移动端 触摸按钮 蓝色边框</span></td></tr>'
					+'<tr><td class="td1" data-line-number="9"></td><td class="td2 padding_left">  -webkit-tap-highlight-color: rgba(0,0,0,0);</td></tr>'
					+'<tr><td class="td1" data-line-number="10"></td><td class="td2"><span>透明背景</span></td></tr>'
					+'<tr><td class="td1" data-line-number="11"></td><td class="td2 padding_left">   filter:Alpha(opacity=40);</td></tr>'
					+'<tr><td class="td1" data-line-number="12"></td><td class="td2 padding_left">   background:#000000;/*实现IE背景透明*/</td></tr>'
					+'<tr><td class="td1" data-line-number="13"></td><td class="td2 padding_left">   background:rgba(0, 0, 0, 0.4) none repeat scroll 0 0;/*实现FF背景透明，文字不透明*/</td></tr>'
					+'<tr><td class="td1" data-line-number="14"></td><td class="td2"><span>textarea 文本域 的 提示</span> </td></tr>'
					+'<tr><td class="td1" data-line-number="15"></td><td class="td2 padding_left"> 文本域 闭合标签 不能换行</td></tr>'
					+'<tr><td class="td1" data-line-number="16"></td><td class="td2"> -webkit-animation: rotate 2s ease 0.5s infinite normal;</td></tr>'
					+'<tr><td class="td1" data-line-number="17"></td><td class="td2 padding_left">参数说明 ： 名称  执行时间 运动曲线  延迟执行  次数  是否反向执行 </td></tr>'
					+'<tr><td class="td1" data-line-number="18"></td><td class="td2"> 拨打电话</td></tr>'
					+'<tr><td class="td1" data-line-number="19"></td><td class="td2 padding_left"><a href="tel:4000939775">4000-939-775</a></td></tr>'
					+'<tr><td class="td1" data-line-number="20"></td><td class="td2"> 嵌入视频层级  解决视频框至顶的问题</td></tr>'
					+'<tr><td class="td1" data-line-number="21"></td><td class="td2 padding_left">"WMode": "Opaque"</td></tr>'
					+'<tr><td class="td1" data-line-number="22"></td><td class="td2">  width: calc(100% - 10rem);</td></tr>'
					+'<tr><td class="td1" data-line-number="23"></td><td class="td2 padding_left">css3加减法  注意 : 空格</td></tr>'
					+'<tr><td class="td1" data-line-number="24"></td><td class="td2">  meta name="format-detection" content="telephone=no"</td></tr>'
					+'<tr><td class="td1" data-line-number="25"></td><td class="td2 padding_left"> ios 数字变为 电话问题</td></tr>'
					+'<tr><td class="td1" data-line-number="26"></td><td class="td2"><span>css3之Flexbox布局</span></td></tr>'
					+'<tr><td class="td1" data-line-number="27"></td><td class="td2 padding_left">display：flex代表这个容器是一个可伸缩容器，还可以取值为inline-flex,两者的区别在于前者将这个容器渲染为块级元素，后者将其渲染为内联元素。</td></tr>'
					+'<tr><td class="td1" data-line-number="28"></td><td class="td2 padding_left">flex-direction属性，它的取值为row，column，column-reverse，row-reverse,默认值是row，表示在水平方向上展开可伸缩项，如果取column代表在垂直方向上展开可伸缩项目，column-reverse，row-reverse代表相反方向，通俗讲，flex-direction属性就是用来定义主轴侧轴方向</td></tr>'
					+'<tr><td class="td1" data-line-number="29"></td><td class="td2 padding_left">（1）主轴（侧轴）容器中的可伸缩项目水平方向上可伸缩展开，那么水平方向上就是主轴，垂直方向上是侧轴，反之亦然</td></tr>'
					+'<tr><td class="td1" data-line-number="30"></td><td class="td2 padding_left">（2）主轴（侧轴）长度，当确定了哪个是主轴哪个是侧轴之后，在主轴方向上可伸缩容器的尺寸（宽或高）就被称作主轴长度，侧轴方向上的容器尺寸（宽或高）就被称作侧轴长度；</td></tr>'
					+'<tr><td class="td1" data-line-number="31"></td><td class="td2 padding_left">（3）主轴（侧轴）起点，主轴（侧轴）终点，例如主轴方向是水平方向，通常在水平方向上网页布局是从左向右的，那么可伸缩容器的左border就是主轴起点，右border就是主轴终点，侧轴是在垂直方向，通常是从上到下的，所以上border就是侧轴起点，下border就是侧轴终点；</td></tr>'
					+'<tr><td class="td1" data-line-number="32"></td><td class="td2 padding_left">（4）伸缩容器：如果要构建一个可伸缩的盒子，这些可伸缩的项目必须要由一个display：flex的属性的盒子包裹起来，这个盒子就叫做伸缩容器；</td></tr>'
					+'<tr><td class="td1" data-line-number="33"></td><td class="td2 padding_left">（5）伸缩项目：包含在伸缩容器中需要进行伸缩布局的元素被称作伸缩项目；</td></tr>'
				+'</table>'	
	},
	{
		title:'js 常见问题',
		time: "2016.10.28",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2">oninput 事件在用户输入时触发。</td></tr>'
					+'<tr><td class="td1" data-line-number="2"></td><td class="td2">Object.prototype.toString.call(data) 判断数据类型</td></tr>'
				+'</table>'	
	},	
	{
		title:'rivets  轻便而强大的数据绑定  <a href="http://rivetsjs.com/">http://rivetsjs.com/</a> ',
		time: "2016.10.14",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2">特点：轻量级 适用于移动端APP开发</td></tr>'
				+'</table>'	
	},		
	{
		title:'mobiscroll  移动端弹框选择  <a href="https://mobiscroll.com/">https://mobiscroll.com/</a> ',
		time: "2016.10.20",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2">例子：选择 年 月</td></tr>'
					+'<tr><td class="td1" data-line-number="2"></td><td class="td2 padding_left"> mobiscroll.date("#demo", { </td></tr>'
					+'<tr><td class="td1" data-line-number="3"></td><td class="td2 padding_left1"> theme: "mobiscroll", </td></tr>'
					+'<tr><td class="td1" data-line-number="4"></td><td class="td2 padding_left1"> lang: "zh", </td></tr>'
					+'<tr><td class="td1" data-line-number="5"></td><td class="td2 padding_left1"> display: "bottom", </td></tr>'
					+'<tr><td class="td1" data-line-number="6"></td><td class="td2 padding_left1"> dateWheels: "yy mm dd",  // 年 月 日 可自定义显示</td></tr>'
					+'<tr><td class="td1" data-line-number="7"></td><td class="td2 padding_left1"> dateFormat: "yy-mm-dd",  // 时间的连接字符可自定义</td></tr>'
					+'<tr><td class="td1" data-line-number="8"></td><td class="td2 padding_left1"> min: new Date(2000,1,1), </td></tr>'
					+'<tr><td class="td1" data-line-number="9"></td><td class="td2 padding_left1"> max: new Date(), </td></tr>'
					+'<tr><td class="td1" data-line-number="0"></td><td class="td2 padding_left1"> minWidth: 100, </td></tr>'
					+'<tr><td class="td1" data-line-number="11"></td><td class="td2 padding_left1"> onBeforeClose:function(event,inst){ </td></tr>'
					+'<tr><td class="td1" data-line-number="12"></td><td class="td2 padding_left2"> if(event.button == "set" && event.valueText != ""){ </td></tr>'
					+'<tr><td class="td1" data-line-number="13"></td><td class="td2 padding_left3"> alert(event) </td></tr>'
					+'<tr><td class="td1" data-line-number="14"></td><td class="td2 padding_left2"> } </td></tr>'
					+'<tr><td class="td1" data-line-number="15"></td><td class="td2 padding_left1"> } </td></tr>'
					+'<tr><td class="td1" data-line-number="16"></td><td class="td2 padding_left"> });</tr>'
				+'</table>'	
	},
	{
		title:'MobaXterm  远程连接客户端  <a href="http://mobaxterm.mobatek.net/">http://mobaxterm.mobatek.net/</a> ',
		time: "2016.10.25",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2">特点：强大、高速SSH连接器</td></tr>'
				+'</table>'	
	},
	{
		title:'windows  快捷键',
		time: "2016.11.11",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2"> Ctrl + F4 或 Alt + F4 关闭当前程序</td></tr>'
					+'<tr><td class="td1" data-line-number="2"></td><td class="td2"> Ctrl + W 关闭当前页面</td></tr>'
					+'<tr><td class="td1" data-line-number="3"></td><td class="td2"> Win + Tab  任务视图</td></tr>'
					+'<tr><td class="td1" data-line-number="4"></td><td class="td2"> Win + Ctrl + 左/右  切换虚拟桌面</td></tr>'
					+'<tr><td class="td1" data-line-number="5"></td><td class="td2"> Win + Ctrl + D  创建新的虚拟桌面</td></tr>'
					+'<tr><td class="td1" data-line-number="6"></td><td class="td2"> Win + Ctrl + F4  关闭当前虚拟桌面</td></tr>'
					+'<tr><td class="td1" data-line-number="7"></td><td class="td2"> Win + D  显示桌面</td></tr>'
					+'<tr><td class="td1" data-line-number="8"></td><td class="td2"> Win + Home  最小化处活动窗口之外的所有窗口</td></tr>'
					+'<tr><td class="td1" data-line-number="9"></td><td class="td2"> Win + N  创建新文件</td></tr>'
				+'</table>'	
	},
	{
		title:'linux 快捷键',
		time: "2016.11.18",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="2"></td><td class="td2">arch 显示机器的处理器架构(1) </td></tr>'
					+'<tr><td class="td1" data-line-number="3"></td><td class="td2"><i>(uname: Unix name  系统名称)</i> uname -m 显示机器的处理器架构(2) </td></tr>'
					+'<tr><td class="td1" data-line-number="4"></td><td class="td2">uname -r 显示正在使用的内核版本 </td></tr>'
					+'<tr><td class="td1" data-line-number="5"></td><td class="td2">dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI) </td></tr>'
					+'<tr><td class="td1" data-line-number="6"></td><td class="td2">hdparm -i /dev/hda 罗列一个磁盘的架构特性 </td></tr>'
					+'<tr><td class="td1" data-line-number="7"></td><td class="td2">hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 </td></tr>'
					+'<tr><td class="td1" data-line-number="8"></td><td class="td2"><i>(cat Concatenate  串联)</i>  cat /proc/cpuinfo 显示CPU info的信息 </td></tr>'
					+'<tr><td class="td1" data-line-number="9"></td><td class="td2">cat /proc/interrupts 显示中断 </td></tr>'
					+'<tr><td class="td1" data-line-number="10"></td><td class="td2">cat /proc/meminfo 校验内存使用 </td></tr>'
					+'<tr><td class="td1" data-line-number="11"></td><td class="td2">cat /proc/swaps 显示哪些swap被使用 </td></tr>'
					+'<tr><td class="td1" data-line-number="12"></td><td class="td2">cat /proc/version 显示内核的版本</td></tr>'
					+'<tr><td class="td1" data-line-number="13"></td><td class="td2">cat /proc/net/dev 显示网络适配器及统计 </td></tr>'
					+'<tr><td class="td1" data-line-number="14"></td><td class="td2">cat /proc/mounts 显示已加载的文件系统 </td></tr>'
					+'<tr><td class="td1" data-line-number="15"></td><td class="td2">lspci -tv 罗列 PCI 设备 </td></tr>'
					+'<tr><td class="td1" data-line-number="16"></td><td class="td2">lsusb -tv 显示 USB 设备 </td></tr>'
					+'<tr><td class="td1" data-line-number="17"></td><td class="td2">date 显示系统日期 </td></tr>'
					+'<tr><td class="td1" data-line-number="18"></td><td class="td2">cal 2007 显示2007年的日历表 </td></tr>'
					+'<tr><td class="td1" data-line-number="19"></td><td class="td2">date 041217002007.00 设置日期和时间 - 月日时分年.秒 </td></tr>'
					+'<tr><td class="td1" data-line-number="20"></td><td class="td2">clock -w 将时间修改保存到 BIOS </td></tr>'
					+'<tr><td class="td1" data-line-number="21"></td><td class="td2"><span>关机 (系统的关机、重启以及登出 )</span></td></tr>'
					+'<tr><td class="td1" data-line-number="22"></td><td class="td2">shutdown -h now 关闭系统(1) </td></tr>'
					+'<tr><td class="td1" data-line-number="23"></td><td class="td2">init 0 关闭系统(2) </td></tr>'
					+'<tr><td class="td1" data-line-number="24"></td><td class="td2">telinit 0 关闭系统(3) </td></tr>'
					+'<tr><td class="td1" data-line-number="25"></td><td class="td2">shutdown -h hours:minutes & 按预定时间关闭系统 </td></tr>'
					+'<tr><td class="td1" data-line-number="26"></td><td class="td2">shutdown -c 取消按预定时间关闭系统 </td></tr>'
					+'<tr><td class="td1" data-line-number="27"></td><td class="td2">shutdown -r now 重启(1) </td></tr>'
					+'<tr><td class="td1" data-line-number="28"></td><td class="td2">reboot 重启(2) </td></tr>'
					+'<tr><td class="td1" data-line-number="29"></td><td class="td2">logout 注销 </td></tr>'
					+'<tr><td class="td1" data-line-number="30"></td><td class="td2"><span>文件和目录 </span> </td></tr>'
					+'<tr><td class="td1" data-line-number="31"></td><td class="td2">cd /home 进入 "/ home" 目录</td></tr>'
					+'<tr><td class="td1" data-line-number="32"></td><td class="td2">cd .. 返回上一级目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="33"></td><td class="td2">cd ../.. 返回上两级目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="34"></td><td class="td2">cd 进入个人的主目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="35"></td><td class="td2">cd ~user1 进入个人的主目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="36"></td><td class="td2">cd - 返回上次所在的目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="37"></td><td class="td2">pwd 显示工作路径  </td></tr>'
					+'<tr><td class="td1" data-line-number="38"></td><td class="td2">ls 查看目录中的文件  </td></tr>'
					+'<tr><td class="td1" data-line-number="39"></td><td class="td2">ls -F 查看目录中的文件  </td></tr>'
					+'<tr><td class="td1" data-line-number="40"></td><td class="td2">ls -l 显示文件和目录的详细资料  </td></tr>'
					+'<tr><td class="td1" data-line-number="41"></td><td class="td2">ls -a 显示隐藏文件  </td></tr>'
					+'<tr><td class="td1" data-line-number="42"></td><td class="td2">ls *[0-9]* 显示包含数字的文件名和目录名  </td></tr>'
					+'<tr><td class="td1" data-line-number="43"></td><td class="td2">tree 显示文件和目录由根目录开始的树形结构(1)  </td></tr>'
					+'<tr><td class="td1" data-line-number="44"></td><td class="td2">lstree 显示文件和目录由根目录开始的树形结构(2)  </td></tr>'
					+'<tr><td class="td1" data-line-number="45"></td><td class="td2">mkdir dir1 创建一个叫做 "dir1" 的目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="46"></td><td class="td2">mkdir dir1 dir2 同时创建两个目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="47"></td><td class="td2">mkdir -p /tmp/dir1/dir2 创建一个目录树  </td></tr>'
					+'<tr><td class="td1" data-line-number="48"></td><td class="td2">rm -f file1 删除一个叫做 "file1" 的文件  </td></tr>'
					+'<tr><td class="td1" data-line-number="49"></td><td class="td2">rmdir dir1 删除一个叫做 "dir1" 的目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="50"></td><td class="td2">rm -rf dir1 删除一个叫做 "dir1" 的目录并同时删除其内容  </td></tr>'
					+'<tr><td class="td1" data-line-number="51"></td><td class="td2">rm -rf dir1 dir2 同时删除两个目录及它们的内容  </td></tr>'
					+'<tr><td class="td1" data-line-number="52"></td><td class="td2">mv dir1 new_dir 重命名/移动 一个目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="53"></td><td class="td2">cp file1 file2 复制一个文件  </td></tr>'
					+'<tr><td class="td1" data-line-number="54"></td><td class="td2">cp dir/* . 复制一个目录下的所有文件到当前工作目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="55"></td><td class="td2">cp -a /tmp/dir1 . 复制一个目录到当前工作目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="56"></td><td class="td2">cp -a dir1 dir2 复制一个目录  </td></tr>'
					+'<tr><td class="td1" data-line-number="57"></td><td class="td2">ln -s file1 lnk1 创建一个指向文件或目录的软链接  </td></tr>'
					+'<tr><td class="td1" data-line-number="58"></td><td class="td2">ln file1 lnk1 创建一个指向文件或目录的物理链接  </td></tr>'
					+'<tr><td class="td1" data-line-number="59"></td><td class="td2">(vi )vi 1.html  创建一个 1.html 文件并编辑 (i 进入编辑  esc 退出编辑 :wq 保存退出)</td></tr>'
					+'<tr><td class="td1" data-line-number="60"></td><td class="td2">(touch )touch 1.html  创建一个 1.html 文件 </td></tr>'
					+'<tr><td class="td1" data-line-number="61"></td><td class="td2">touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)  </td></tr>'
					+'<tr><td class="td1" data-line-number="62"></td><td class="td2">iconv -l 列出已知的编码  </td></tr>'
					+'<tr><td class="td1" data-line-number="63"></td><td class="td2"><span>查看文件内容</span></td></tr>'
					+'<tr><td class="td1" data-line-number="64"></td><td class="td2">cat file1 从第一个字节开始正向查看文件的内容  </td></tr>'
					+'<tr><td class="td1" data-line-number="65"></td><td class="td2">tac file1 从最后一行开始反向查看一个文件的内容  </td></tr>'
					+'<tr><td class="td1" data-line-number="66"></td><td class="td2">more file1 查看一个长文件的内容  </td></tr>'
					+'<tr><td class="td1" data-line-number="67"></td><td class="td2">less file1 类似于 "more" 命令，但是它允许在文件中和正向操作一样的反向操作  </td></tr>'
					+'<tr><td class="td1" data-line-number="68"></td><td class="td2">head -2 file1 查看一个文件的前两行  </td></tr>'
					+'<tr><td class="td1" data-line-number="69"></td><td class="td2">tail -2 file1 查看一个文件的最后两行  </td></tr>'
					+'<tr><td class="td1" data-line-number="70"></td><td class="td2">tail -f /var/log/messages 实时查看被添加到一个文件中的内容  </td></tr>'
					+'<tr><td class="td1" data-line-number="71"></td><td class="td2"><span>文件格式转换</span></td></tr>'
					+'<tr><td class="td1" data-line-number="72"></td><td class="td2">recode -l | more 显示所有允许的转换格式  </td></tr>'
					+'<tr><td class="td1" data-line-number="73"></td><td class="td2">recode ..HTML < page.txt > page.html 将一个文本文件转换成html  </td></tr>'
					+'<tr><td class="td1" data-line-number="74"></td><td class="td2">dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX  </td></tr>'
					+'<tr><td class="td1" data-line-number="75"></td><td class="td2">unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS  </td></tr>'
					+'<tr><td class="td1" data-line-number="76"></td><td class="td2"><i>(umount: Unmount 卸载)</i></td></tr>'
					+'<tr><td class="td1" data-line-number="77"></td><td class="td2">./1.exe 启动1.exe 程序</td></tr>'
				+'</table>'	
	},
	{
		title:'Vue  轻量级的 MVVM 框架',
		time: "2016.11.11",
		inner:  '<table>'
					+'<tr><td class="td1" data-line-number="1"></td><td class="td2">Vue.js  是一套构建用户界面的 渐进式框架</td></tr>'
				+'</table>'	
	},			
]